rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents { 
  	
    // --------------- Role Checks --------------
  	//function isAdmin() {
    //  let role = get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role;
    //  let isAdmin = role == 'Administrator';
      
		// return isAdmin;
    // }
    
  	function isUser() {
    	let isAuthorized = request.auth != null;
    	let doesUserExist = exists(/databases/$(database)/documents/profiles/$(request.auth.uid));
      
      return isAuthorized && doesUserExist;
    }
    
    // ---------------- Games ----------------------
    function valid_games_read() {
    	let userIsPlayer = request.auth.uid in resource.data.players;
      
      return userIsPlayer;
    }
    
    function valid_games_create() {
    	let isCreatorInPlayerList = request.auth.uid in request.resource.data.players;
      let creatorIsOwner = request.auth.uid == request.resource.data.ownerId;
      
      return isCreatorInPlayerList && creatorIsOwner;
    }
    
    match /games/{gameId} {
    	allow read : if isUser() && valid_games_read();
      allow update: if isUser();
      allow create : if isUser() && valid_games_create();
    }
    
    // ---------------- Profile ----------------------
    function valid_profile_update() {
      let isUserRequestingUpdate = request.auth.uid == request.resource.id;
      
      return isUserRequestingUpdate;
    }
    
    function valid_profile_create(userId) {
    	let doesUserNotExist = !exists(/databases/$(database)/documents/profiles/$(request.auth.uid));
      let isUserSameAsUserBeingCreated = userId == request.auth.uid;
      
      return doesUserNotExist && isUserSameAsUserBeingCreated;
    }
    
    match /profiles/{userId} {
    	allow read : if request.auth != null;
      allow update: if isUser() && valid_profile_update();
      allow create: if request.auth != null && valid_profile_create(userId);
    }
  }
}