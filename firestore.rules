rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents { 
  	
    // --------------- Role Checks --------------
  	//function isAdmin() {
    //  let role = get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.role;
    //  let isAdmin = role == 'Administrator';
      
		// return isAdmin;
    // }
    
  	function isUser() {
    	let isAuthorized = request.auth != null;
    	let doesUserExist = exists(/databases/$(database)/documents/profiles/$(request.auth.uid));
      
      return isAuthorized && doesUserExist;
    }
    
    function isUserOwnerOfGame(gameId) {
    	let ownerId = get(/databases/$(database)/documents/games/$(gameId)).data.ownerId;
      let isUserOwnerOfGame = request.auth.uid == ownerId;
      
      return isUserOwnerOfGame;
    }
    
    function isUserPlayerInGame(gameId) {
    	let userId = request.auth.uid;
    	let isUserPlayerInGame = !exists(/databases/$(database)/documents/games/$(gameId)/players/$(userId));
      
      return isUserPlayerInGame;
    }
    
    // ---- Game Object Specific ----
    function isGameObjectVisible(gameId, sceneId, gameObjectId) {
    	return get(/databases/$(database)/documents/gameObjectsInScene/$(gameId)/scenes/$(sceneId)/gameObjects/$(gameObjectId)).data.isVisible;
    }
    
    function canUserPlace(userId, gameId, gameObjectId) {
    	return exists(/databases/$(database)/documents/gameObjects/$(gameId)/gameObjects/$(gameObjectId)/playersWhoCanPlace/$(userId));
    }
    
    function canUserMove(userId, gameId, gameObjectId) {
    	return exists(/databases/$(database)/documents/gameObjects/$(gameId)/gameObjects/$(gameObjectId)/playersWhoControl/$(userId));
    }
    
    function canUserRead(userId, gameId, gameObjectId) {
    	return exists(/databases/$(database)/documents/gameObjects/$(gameId)/gameObjects/$(gameObjectId)/playersWhoCanRead/$(userId));
    }
    
    // ---------------- Games ----------------------
    function valid_games_read() {
    	let userIsPlayer = request.auth.uid in resource.data.players;
      
      return userIsPlayer;
    }
    
    function valid_games_create() {
    	let isCreatorInPlayerList = request.auth.uid in request.resource.data.players;
      let creatorIsOwner = request.auth.uid == request.resource.data.ownerId;
      
      return isCreatorInPlayerList && creatorIsOwner;
    }
    
    match /games/{gameId} {
    	allow read : if isUser() && valid_games_read();
      allow update: if isUser();
      allow create : if isUser() && valid_games_create();
    }
    
     // ---------------- Game Players In Scene ----------------------
    
    function valid_game_players_read(playerId, gameId) {
    	return request.auth.uid == playerId || isUserOwnerOfGame(gameId);
    }
    
    function valid_game_players_update(playerId, gameId) {
    	// TODO - Scenes Will Be Connected, Need to make sure a player's standing on that connection before
      // a switch can be made. (or the user is the owner).
    	return request.auth.uid == playerId || isUserOwnerOfGame(gameId);
    }
    
    function valid_game_players_create(gameId) {
    	return isUserOwnerOfGame(gameId);
    }
    
    match /gamePlayersInScene/{gameId}/players/{playerId} {
    	allow read : if isUser() && valid_game_players_read(playerId, gameId);
      allow update: if isUser() && valid_game_players_update(playerId, gameId);
      allow create: if isUser() && valid_game_players_create(gameId);
    }
    
    // ---------------- Game Assets ----------------------
    function valid_game_asset_read(gameId) {
    	// Might change this to try and tell if original creator is looking at is as well.
      return isUserPlayerInGame(gameId);
    }
    
    function valid_game_asset_update(gameId) {
    	// Might change this to try and tell if the original creator of the asset is the one updating it.
    	return isUserOwnerOfGame(gameId);
    }
    
    function valid_game_asset_create(gameId) {
    	// Might want to change this to just the owner... not sure.
    	return isUserPlayerInGame(gameId);
    }
    
    match /gameAssets/{gameId}/assets/{assetId} {
    	allow read : if isUser() && valid_game_asset_read(gameId);
      allow update: if isUser() && valid_game_asset_update(gameId);
      allow create: if isUser() && valid_game_asset_create(gameId);
    }
    
    // ---------------- Game Objects ----------------------
    
    function valid_game_objects_read(gameId) {
    	let isUserPlayerInGame = isUserPlayerInGame(gameId);
      let isUserOwnerOfGame = isUserOwnerOfGame(gameId);
      
      return isUserOwnerOfGame || isUserPlayerInGame;
    }
    
    function valid_game_objects_create(gameId) {
    	return isUserOwnerOfGame(gameId);
    }
    
    function valid_game_objects_update(gameId) {
    	let isUserOwner = isUserOwnerOfGame(gameId);
      
      let existingReadPerms = resource.data.playersWhoCanRead;
      let newReadPerms = request.resource.data.playersWhoCanRead;
      let changingWhoCanRead = existingReadPerms.hasAll(newReadPerms);
      
      let existingControlPerms = resource.data.playersWhoControl;
      let newControlPerms = request.resource.data.playersWhoControl;
      let changingWhoCanControl = existingControlPerms.hasAll(newControlPerms);
      
      
      let isUserAbleToControl = request.auth.uid in resource.data.playersWhoControl;
      
      return isUserOwner || (isUserAbleToControl && !changingWhoCanRead && !changingWhoCanControl);
    }
    
    match /gameObjects/{gameId}/gameObjects/{gameObjectId} {
    	allow read : if isUser() && valid_game_objects_read(gameId);
      allow update: if isUser() && valid_game_objects_update(gameId);
      allow create: if isUser() && valid_game_objects_create(gameId);
    }
    
    // ---------------- Games Objects In Scene ----------------------
    function valid_game_object_in_scene_read(gameId) {
      let isUserOwner = isUserOwnerOfGame(gameId);
      let isUserPlayer = isUserPlayerInGame(gameId);
      
    	return isUserOwner || isUserPlayer;
    }
    
    function valid_game_object_in_scene_update(gameId, gameObjectId) {
  		let isUserOwner = isUserOwnerOfGame(gameId);
      
      let userId = request.auth.uid;
      let canMove = canUserMove(userId, gameId, gameObjectId);
      
      let isTryingToChangeVisibility = resource.data.isVisible != request.resource.data.isVisible;
      
    	return isUserOwner || (canMove && !isTryingToChangeVisibility);
    }
    
    function valid_game_object_in_scene_create(gameId, gameObjectId) {
    	let isUserOwner = isUserOwnerOfGame(gameId);
      
      let userId = request.auth.uid;
      let canUserCreate = canUserPlace(userId, gameId, gameObjectId);
      
    	return isUserOwner || canUserCreate;
    }
    
    match /gameObjectsInScene/{gameId}/scenes/{sceneId}/gameObjects/{gameObjectId} {
    	allow read : if isUser() && valid_game_object_in_scene_read(gameId);
      allow update: if isUser() && valid_game_object_in_scene_update(gameId, gameObjectId);
      allow create : if isUser() && valid_game_object_in_scene_create(gameId, gameObjectId);
    }
    
    // ---------------- Profile ----------------------
    function valid_profile_update() {
      let isUserRequestingUpdate = request.auth.uid == request.resource.id;
      
      return isUserRequestingUpdate;
    }
    
    function valid_profile_create(userId) {
    	let doesUserNotExist = !exists(/databases/$(database)/documents/profiles/$(request.auth.uid));
      let isUserSameAsUserBeingCreated = userId == request.auth.uid;
      
      return doesUserNotExist && isUserSameAsUserBeingCreated;
    }
    
    match /profiles/{userId} {
    	allow read : if request.auth != null;
      allow update: if isUser() && valid_profile_update();
      allow create: if request.auth != null && valid_profile_create(userId);
    }
    
    // ---------------- Friend Requests ----------------------
    function valid_friend_request_read() {
    	let isReaderToPlayer = request.resource.data.to == request.auth.uid;
      let isReaderFromPlayer = request.resource.data.from == request.auth.uid;
      
      return isReaderToPlayer || isReaderFromPlayer;
    }
    
    function valid_friend_request_create() {
    	let toPlayerId = request.resource.data.to;
      let fromPlayerId = request.resource.data.from;
      
      let isCreatorTheFromPlayer = request.auth.uid == fromPlayerId;
      let doesToPlayerExist = exists(/databases/$(database)/documents/profiles/$(toPlayerId));
      let doesFromPlayerExist = exists(/databases/$(database)/documents/profiles/$(fromPlayerId));
      
      return doesToPlayerExist && doesFromPlayerExist && isCreatorTheFromPlayer;
    }
    
    function valid_friend_request_delete() {
    	let toPlayerId = request.resource.data.to;
    	let fromPlayerId = request.resource.data.from;
    	
    	let doesToPlayerExist = exists(/databases/$(database)/documents/profiles/$(toPlayerId));
    	let doesFromPlayerExist = exists(/databases/$(database)/documents/profiles/$(fromPlayerId));
      
    	return doesToPlayerExist && doesFromPlayerExist;
    }
    
    match /friendRequests/{friendRequestId} {
    	allow read : if isUser() && valid_friend_request_read();
      allow update: if false;
      allow create: if isUser() && valid_friend_request_create();
      allow delete: if isUser() && valid_friend_request_delete();
    }
  }
}